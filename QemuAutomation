import subprocess
import socket
import time

# Initialize qemu_process as a global variable with None
qemu_process = None

class Actions:

    def __init__(self):
        print("Initializing QEMU...")
        self.qemu_cmd = [
            "qemu-system-riscv64", "-machine", "virt", "-cpu", "rv64", "-m", "2G",
            "-device", "usb-ehci,id=ehci", "-device", "piix4-usb-uhci,id=uhci",
            "-device", "usb-kbd,bus=ehci.0", "-device", "usb-mouse,bus=ehci.0",
            "-netdev", "user,id=net0", "-device", "e1000,netdev=net0",
            "-device", "virtio-blk-pci,drive=hd", "-drive", "file=dqib_riscv64-virt/image.qcow2,if=none,id=hd",
            "-bios", "/usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.elf",
            "-kernel", "/usr/lib/u-boot/qemu-riscv64_smode/uboot.elf",
            "-nographic",
            "-monitor", "unix:/tmp/qemu_monitor.sock,server,nowait",  # QEMU monitor over Unix socket
            "-serial", "tcp:127.0.0.1:4444,server,nowait"  # Serial over TCP on port 4444
        ]

    def QemuStart(self):
        global qemu_process

        # Starting QEMU
        qemu_process = subprocess.Popen(self.qemu_cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        time.sleep(5)
        print("QEMU started.")

    def QemuStop(self):
        global qemu_process

        if qemu_process is not None:
            qemu_process.terminate()
            qemu_process.wait()
            qemu_process = None
            print("QEMU stopped.")

    def send_serial_command(self, command):
        """Send a command to the QEMU VM's serial port and capture the output."""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect(("127.0.0.1", 4444))
            sock.sendall(command.encode() + b'\n')
            time.sleep(1)  # Wait for command to execute and output to be available

            # Receive data from the VM
            output = sock.recv(4096).decode()
            print(f"Command output: {output}")
            return output

    def QemuRestart(self):
        """Restart QEMU through the QEMU monitor using 'system_reset'."""
        print("Restarting QEMU using system_reset...")
        response = self.send_monitor_command("system_reset")
        if response:
            print("QEMU reset successfully.")
        else:
            print("Failed to reset QEMU through the monitor.")

    def send_monitor_command(self, command):
        """Send a command to the QEMU monitor via Unix socket and capture the output."""
        try:
            result = subprocess.run(
                f'echo "{command}" | socat - UNIX-CONNECT:/tmp/qemu_monitor.sock',
                shell=True,
                check=True,
                capture_output=True,
                text=True
            )

            output = result.stdout.strip()
            if output:
                print(f"Monitor output: {output}")
            return output

        except subprocess.CalledProcessError as e:
            print(f"Failed to send command to monitor: {e}")
            return None
